# ----------------------------------------------------------------------------------------------------
# ISAAC Data Interface
# ----------------------------------------------------------------------------------------------------
#
# How to run the ISAAC Data Interface using Docker Compose:
#
# 1. ./build.sh
#
#    This script will build every component defined in this docker-compose file.
#
# 2. ./run.sh
#
#    This script will launch both the IDI using docker-compose and the ISAAC Docker container.
#
# 3. ./status.sh
#
#    This script will help you debug the IDI and its various subsystems.
#
# 4. ./shutdown.sh
#
#    This script will shutdown both the IDI and the ISAAC Docker container.
#
# ----------------------------------------------------------------------------------------------------
# Important notes about this file
# ----------------------------------------------------------------------------------------------------
#
# 1. This file may contain more services than needed for the demo purposes,
#    such as those that replay bags or echo a ROS topic. I've marked them below
#    as essential and non-essential services.
#
# 2. The name of the network is important because it's used by some of the
#    build/run/etc scripts. If you change it, you'll have to change the
#    name in the scripts too.
#
# 3. Some data will persist between multiple runs of this system. If you'd like to
#    delete persistent data (such as the data in the IDI database), run:
#
#    docker-compose down -v
#
version: "2.1"
services:
  # --------------------------------------------------------------------------------------------------
  # Essential IDI Services
  # --------------------------------------------------------------------------------------------------
  idi_frontend:
    # This service serves the static content that represents
    # the frontend ISAAC data interface.
    #
    image: isaac_data_interface_frontend
    build: "${IDI_PATH:-.}/frontend"
    hostname: idi_frontend
    container_name: idi_frontend
    ports:
      - "8080:8080"
    depends_on:
      - idi_backend
      - rosbridge
    networks:
      - isaac
    # uncomment the two lines below ONLY if you are actively developing
    # the IDI frontend and need fast reloads on code changes
    # volumes:
    #   - "./frontend:/app:ro"

  idi_backend:
    # This service serves the front-end by providing it with
    # historical telemetry that it retrieves from ROS bridge.
    #
    image: isaac_data_interface_backend
    build: "${IDI_PATH:-.}/backend"
    hostname: idi_backend
    container_name: idi_backend
    command: python /main.py
    volumes:
      - "${IDI_PATH:-.}/config.json:/config.json:ro"
    depends_on:
      - rosmaster
      - rosbridge
      - idi_arangodb
    ports:
      - "9091:9091"
    networks:
      - isaac
    links:
      - idi_arangodb

  idi_arangodb:
    # This service provides a database for the backend. The
    # backend uses this database to store ROS messages in JSON format.
    #
    image: arangodb:latest
    hostname: idi_arangodb
    container_name: idi_arangodb
    environment:
      ARANGO_ROOT_PASSWORD: isaac
    ports:
      - "8529:8529"
    volumes:
      - arangodb_data_container:/data/arangodb3
      - arangodb_apps_data_container:/data/arangodb3-apps
    networks:
      - isaac

  rosbridge:
    # This service will provide a bridge between ROS and the web through
    # a WebSocket open on port 9090.
    #
    # For more info, see:
    # http://wiki.ros.org/rosbridge_suite
    #
    image: isaac_data_interface_rosbridge
    build:
      context: "${IDI_PATH:-.}/rosbridge"
      args:
        UBUNTU_VERSION: '${UBUNTU_VERSION}'
        ROS_VERSION: '${ROS_VERSION}'
        PYTHON: '${PYTHON}'
    hostname: rosbridge
    container_name: rosbridge
    entrypoint: "/ros_entrypoint.sh"
    command: "roslaunch --wait /rosbridge/publishers.launch"
    ports:
      - "9090:9090"
    depends_on:
      - rosmaster
    environment:
      - ROS_MASTER_URI=http://rosmaster:11311
      - ROS_IP=172.19.0.8
    networks:
      isaac:
        ipv4_address: 172.19.0.8

  rosvideo:
    # This service runs a web video server that will efficiently
    # publish a stream of images from a ROS topic that is set to
    # publish ROS messages of the type sensor_msgs/Image
    #
    # For more info, see:
    # http://wiki.ros.org/web_video_server
    #
    image: isaac_data_interface_rosvideo
    build:
      context: "${IDI_PATH:-.}/rosvideo"
      args:
        UBUNTU_VERSION: '${UBUNTU_VERSION}'
        ROS_VERSION: '${ROS_VERSION}'
        PYTHON: '${PYTHON}'
    hostname: rosvideo
    container_name: rosvideo
    entrypoint: "/ros_entrypoint.sh"
    command: "rosrun web_video_server web_video_server"
    expose:
      - 8080
    depends_on:
      - rosmaster
      - rosbridge
    environment:
      - ROS_MASTER_URI=http://rosmaster:11311
      - ROS_IP=172.19.0.9
    networks:
      isaac:
        ipv4_address: 172.19.0.9

  idi_transformers:
    # This service is the master of meshes: it subscribes to these
    # three ROS topics:
    # 1. /ism/sci_cam/img
    # 2. /ism/sci_cam/obj
    # 3. /ism/sci_cam/mtl
    # When it recieves a complete mesh from all three topics, it
    # assembles them and creates a GLTF file. Then it publishes on
    # the following ROS topic to let the IDI frontend know that
    # a new mesh is available.
    # 1. /mapper_gltf
    #
    image: isaac_data_interface_transformers
    build: 
      context: "${IDI_PATH:-.}/transformers"
      args:
        UBUNTU_VERSION: '${UBUNTU_VERSION}'
        ROS_VERSION: '${ROS_VERSION}'
        PYTHON: '${PYTHON}'
    hostname: idi_transformers
    container_name: idi_transformers
    command: /transformers/run.sh
    depends_on:
      - rosmaster
    environment:
      - ROS_MASTER_URI=http://rosmaster:11311
      - ROS_IP=172.19.0.7
    networks:
      isaac:
        ipv4_address: 172.19.0.7

  idi_notebook:
    # Launches analyst notebook
    #
    image: isaac_data_interface_notebook
    build: "${IDI_PATH:-.}/notebook"
    hostname: idi_notebook
    container_name: idi_notebook
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_TOKEN=isaac
      - ROS_MASTER_URI=http://rosmaster:11311
    depends_on:
      - rosmaster
    volumes:
      - ${IDI_PATH:-.}/notebook/workspace:/home/jovyan/workspace/
    networks:
      - isaac
    command: "start-notebook.sh"

# ----------------------------------------------------------------------------------------------------
# Docker Compose Volumes
# ----------------------------------------------------------------------------------------------------
volumes:
  idi_database_volume:
  arangodb_data_container:
  arangodb_apps_data_container:
